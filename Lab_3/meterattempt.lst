                  2   $LIST
0000              4   
0000              5   org 0000H
0000 0203A6       6      ljmp MyProgram
0003              7   
0003              8   ; These register definitions needed by 'math32.inc'
0030              9   DSEG at 30H
0030             10   x:   ds 4
0034             11   y:   ds 4
0038             12   bcd: ds 5
003D             13   
0000             14   BSEG
0000             15   mf: dbit 1 ;flag that is 1 when x and y is the same 
0001             16   
                570   $LIST
                 18   $LIST
0299             20   
0299             21   cseg
0299             22   ; These 'equ' must match the hardware wiring
0299             23   LCD_RS equ P3.2
0299             24   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0299             25   LCD_E  equ P3.3
0299             26   LCD_D4 equ P3.4
0299             27   LCD_D5 equ P3.5
0299             28   LCD_D6 equ P3.6
0299             29   LCD_D7 equ P3.7
0299             30   
                 32   	$LIST
0345             34   
0345             35   ;                     1234567890123456    <- This helps determine the location of the counter
0345 43617061    36   Initial_Message:  db 'Capacitance(uF): ', 0
     63697461
     6E636528
     7546293A
     2000
0357 4E6F2073    37   No_Signal_Str:    db 'No signal      ', 0
     69676E61
     6C202020
     20202000
0367             38   
0367             39   ; Sends 10-digit BCD number in bcd to the LCD
0367             40   Display_10_digit_BCD:
0367 C000        41            push ar0
0369 A83C        41            mov r0, bcd+4
036B 12032F      41            lcall ?Display_BCD
036E D000        41            pop ar0
0370 C000        42            push ar0
0372 A83B        42            mov r0, bcd+3
0374 12032F      42            lcall ?Display_BCD
0377 D000        42            pop ar0
0379 C000        43            push ar0
037B A83A        43            mov r0, bcd+2
037D 12032F      43            lcall ?Display_BCD
0380 D000        43            pop ar0
0382 C000        44            push ar0
0384 A839        44            mov r0, bcd+1
0386 12032F      44            lcall ?Display_BCD
0389 D000        44            pop ar0
038B C000        45            push ar0
038D A838        45            mov r0, bcd+0
038F 12032F      45            lcall ?Display_BCD
0392 D000        45            pop ar0
0394 22          46            ret
0395             47   
0395             48   ;Initializes timer/counter 2 as a 16-bit timer
0395             49   InitTimer2:
0395 75C800      50            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
0398             51            ; Set the reload value on overflow to zero (just in case is not zero)
0398 75CB00      52            mov RCAP2H, #0
039B 75CA00      53            mov RCAP2L, #0
039E 22          54       ret
039F             55   
039F             56   ;---------------------------------;
039F             57   ; Hardware initialization         ;
039F             58   ;---------------------------------;
039F             59   Initialize_All:
039F 120395      60       lcall InitTimer2
03A2 1202F3      61       lcall LCD_4BIT ; Initialize LCD
03A5 22          62            ret
03A6             63   
03A6             64   ;---------------------------------;
03A6             65   ; Main program loop               ;
03A6             66   ;---------------------------------;
03A6             67   MyProgram:
03A6             68       ; Initialize the hardware:
03A6 75817F      69       mov SP, #7FH
03A9 12039F      70       lcall Initialize_All
03AC D280        71       setb P0.0 ; Pin is used as input
03AE             72   
03AE C0E0        73            push acc
03B0 7401        73            mov a, #1
03B2 14          73            dec a
03B3 12032A      73            lcall ?Set_Cursor_1 ; Select column and row
03B6 D0E0        73            pop acc
03B8 C083        74            push dph
03BA C082        74            push dpl
03BC C0E0        74            push acc
03BE 900345      74            mov dptr, #Initial_Message
03C1 12031D      74            lcall ?Send_Constant_String
03C4 D0E0        74            pop acc
03C6 D082        74            pop dpl
03C8 D083        74            pop dph
03CA             75       
03CA             76   forever:
03CA             77       ; synchronize with rising edge of the signal applied to pin P0.0
03CA C2CA        78       clr TR2 ; Stop timer 2
03CC 75CC00      79       mov TL2, #0
03CF 75CD00      80       mov TH2, #0
03D2 C2CF        81       clr TF2
03D4 D2CA        82       setb TR2
03D6             83   synch1:
03D6 20CF73      84            jb TF2, no_signal ; If the timer overflows, we assume there is no signal
03D9 2080FA      85       jb P0.0, synch1
03DC             86   synch2:    
03DC 20CF6D      87            jb TF2, no_signal
03DF 3080FA      88       jnb P0.0, synch2
03E2             89       
03E2             90       ; Measure the period of the signal applied to pin P0.0
03E2 C2CA        91       clr TR2
03E4 75CC00      92       mov TL2, #0
03E7 75CD00      93       mov TH2, #0
03EA C2CF        94       clr TF2
03EC D2CA        95       setb TR2 ; Start timer 2
03EE             96   measure1:
03EE             97            ;jb TF2, no_signal
03EE 2080FD      98       jb P0.0, measure1
03F1             99   measure2:    
03F1            100            ;jb TF2, no_signal
03F1 3080FD     101       jnb P0.0, measure2
03F4 C2CA       102       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
03F6            103            ; Using integer math, convert the period to frequency:
03F6 85CC30     104            mov x+0, TL2
03F9 85CD31     105            mov x+1, TH2
03FC 753200     106            mov x+2, #0
03FF 753300     107            mov x+3, #0
0402            108            ; Make sure [TH2,TL2]!=0
0402 E5CC       109            mov a, TL2
0404 45CD       110            orl a, TH2
0406            111            ;jz no_signal
0406 75349B     112            mov y+0, #low (45211 % 0x10000) 
0409 7535B0     112            mov y+1, #high(45211 % 0x10000) 
040C 753600     112            mov y+2, #low (45211 / 0x10000) 
040F 753700     112            mov y+3, #high(45211 / 0x10000)  ; One clock pulse is 45.21123ns
0412 12017D     113            lcall mul32
0415 7534E8     114            mov y+0, #low (1000 % 0x10000) 
0418 753503     114            mov y+1, #high(1000 % 0x10000) 
041B 753600     114            mov y+2, #low (1000 / 0x10000) 
041E 753700     114            mov y+3, #high(1000 / 0x10000) 
0421 12020A     115            lcall div32
0424            116            ; Convert from ns to Hz
0424 120273     117            lcall copy_xy
0427 753000     118            mov x+0, #low (1000000000 % 0x10000) 
042A 7531CA     118            mov x+1, #high(1000000000 % 0x10000) 
042D 75329A     118            mov x+2, #low (1000000000 / 0x10000) 
0430 75333B     118            mov x+3, #high(1000000000 / 0x10000) 
0433 12020A     119            lcall div32 ; frequency is in x right now 
0436 02046B     120       ljmp capMeasure
0439            121            ; Convert the result to BCD and display on LCD
0439            122   printNum:
0439 C0E0       123            push acc
043B 7401       123            mov a, #1
043D 14         123            dec a
043E 120328     123            lcall ?Set_Cursor_2 ; Select column and row
0441 D0E0       123            pop acc
0443 120003     124            lcall hex2bcd
0446 120367     125            lcall Display_10_digit_BCD
0449 0203CA     126       ljmp forever ; Repeat! 
044C            127   
044C            128   no_signal:       
044C C0E0       129            push acc
044E 7401       129            mov a, #1
0450 14         129            dec a
0451 120328     129            lcall ?Set_Cursor_2 ; Select column and row
0454 D0E0       129            pop acc
0456 C083       130            push dph
0458 C082       130            push dpl
045A C0E0       130            push acc
045C 900357     130            mov dptr, #No_Signal_Str
045F 12031D     130            lcall ?Send_Constant_String
0462 D0E0       130            pop acc
0464 D082       130            pop dpl
0466 D083       130            pop dph
0468 0203CA     131       ljmp forever ; Repeat! 
046B            132   capMeasure:
046B 7534B8     133            mov y+0, #low (3000 % 0x10000) 
046E 75350B     133            mov y+1, #high(3000 % 0x10000) 
0471 753600     133            mov y+2, #low (3000 / 0x10000) 
0474 753700     133            mov y+3, #high(3000 / 0x10000)  ;y = 3000
0477 12017D     134       lcall mul32 ;x = 3000*f
047A 120273     135       lcall copy_xy ; y now has the value of x 
047D 753000     136            mov x+0, #low (1440000 % 0x10000) 
0480 7531F9     136            mov x+1, #high(1440000 % 0x10000) 
0483 753215     136            mov x+2, #low (1440000 / 0x10000) 
0486 753300     136            mov x+3, #high(1440000 / 0x10000)  ;divide the two to get the capacitance
0489 12020A     137       lcall div32
048C 020439     138       ljmp printNum
048F            139   end
